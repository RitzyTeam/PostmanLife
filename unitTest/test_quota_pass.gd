extends GutTest

# ЭТОТ ТЕСТ ПРОВЕРЯЕТ, КАКИМ ОБРАЗОМ СЧИТАЕТСЯ ВЕС ИНВЕНТАРЯ

var addresses: Dictionary = {
# Delivery ID | User-friendly name
# Уникальный ID должен совпадать с ID ящика
	'00001': 'Первая Железнодорожная, д1',
	'00002': 'Первая Железнодорожная, д2',
	'00003': 'Первая Железнодорожная, д3',
	'00004': 'Первая Железнодорожная, д4',
	'00005': 'Первая Железнодорожная, д5',
	
	'00006': 'улица Круговая, д1',
	'00007': 'улица Круговая, д2',
	'00008': 'улица Круговая, д3',
	'00009': 'улица Круговая, д4',
	'00010': 'улица Круговая, д5',
	
	'00011': 'Вторая Железнодорожная, д1',
	'00012': 'Вторая Железнодорожная, д2',
	'00013': 'Вторая Железнодорожная, д3',
	'00014': 'Вторая Железнодорожная, д4',
	'00015': 'Вторая Железнодорожная, д5',
	'00016': 'Вторая Железнодорожная, д6',
	'00017': 'Вторая Железнодорожная, д7',
	'00018': 'Вторая Железнодорожная, д8',
	
	'00019': 'Третья Железнодорожная, д1',
	'00020': 'Третья Железнодорожная, д2',
	'00021': 'Третья Железнодорожная, д3',
	'00022': 'Третья Железнодорожная, д4',
	'00023': 'Третья Железнодорожная, д5',
	'00024': 'Третья Железнодорожная, д6',
	
	'00025': 'Четвертая Железнодорожная, д1',
	'00026': 'Четвертая Железнодорожная, д2',
	'00027': 'Четвертая Железнодорожная, д3',
	'00028': 'Четвертая Железнодорожная, д4',
	'00029': 'Четвертая Железнодорожная, д5',
	'00030': 'Четвертая Железнодорожная, д6',
	
	'00031': 'Тихий переулок, д1',
	'00032': 'Тихий переулок, д2',
	'00033': 'Тихий переулок, д3',
	'00034': 'Тихий переулок, д4',
	
	'00035': 'Дудоровская улица, д1',
	'00036': 'Дудоровская улица, д2',
	'00037': 'Дудоровская улица, д3',
	'00038': 'Дудоровская улица, д4',
	'00039': 'Дудоровская улица, д5',
	'00040': 'Дудоровская улица, д6',
	'00041': 'Дудоровская улица, д7',
	'00042': 'Дудоровская улица, д8',
	'00043': 'Дудоровская улица, д9',
	'00044': 'Дудоровская улица, д10',
	'00045': 'Дудоровская улица, д11',
	'00046': 'Дудоровская улица, д12',
	'00047': 'Дудоровская улица, д13',
	'00048': 'Дудоровская улица, д14',
	'00049': 'Дудоровская улица, д15',
	'00050': 'Дудоровская улица, д16',
	'00051': 'Дудоровская улица, д17',
	'00052': 'Дудоровская улица, д18',
	
	'00053': 'Высотная улица, д1, парадная 1',
	'00054': 'Высотная улица, д1, парадная 2',
	'00055': 'Высотная улица, д1, парадная 3',
	
	'00056': 'улица Победы, д2, парадная 1',
	'00057': 'улица Победы, д2, парадная 2',
	'00058': 'улица Победы, д2, парадная 3',
	
	'00059': 'Высотная улица, д2, парадная 1',
	'00060': 'Высотная улица, д2, парадная 2',
	'00061': 'Высотная улица, д2, парадная 3',
	
	'00062': 'улица Победы, д1', # БОЛЬНИЦА
	
	'00063': 'улица Славы, д1',
	'00064': 'улица Славы, д2',
	
	'00065': 'улица Вторая Гражданская, д1',
	'00066': 'улица Вторая Гражданская, д2',
	'00067': 'улица Вторая Гражданская, д3',
	'00068': 'улица Вторая Гражданская, д4',
	
	'00069': 'улица Советская, д1',
	
	'00070': 'улица Первого Мая, д1',
	'00071': 'улица Первого Мая, д2',
	'00072': 'улица Первого Мая, д3',
	
	'00073': 'улица Школьная, д1', # ШКОЛА
	'00074': 'улица Школьная, д2',
	
	'00075': 'улица Цветочная, д1',
	'00076': 'улица Цветочная, д2',
	
	'00077': 'улица Торговая, д1',
	'00078': 'улица Торговая, д2',
	'00079': 'улица Торговая, д3',
	'00080': 'улица Торговая, д4',
	'00081': 'улица Торговая, д5',
	'00082': 'улица Торговая, д6',
	'00083': 'улица Торговая, д7',
	'00084': 'улица Торговая, д8',
	'00085': 'улица Торговая, д9',
	
	'00086': 'улица Первая Гражданская, д1',
	'00087': 'улица Первая Гражданская, д2',
	'00088': 'улица Первая Гражданская, д3',
	'00089': 'улица Первая Гражданская, д4',
	'00090': 'улица Первая Гражданская, д5',
	'00091': 'улица Первая Гражданская, д6',
	'00092': 'улица Первая Гражданская, д7',
	
	'00093': 'улица Первая Крестьянская, д1',
	'00094': 'улица Первая Крестьянская, д2',
	'00095': 'улица Первая Крестьянская, д3',
	'00096': 'улица Первая Крестьянская, д4',
	
	'00097': 'улица Молодежная, д1',
	'00098': 'улица Молодежная, д2',
	'00099': 'улица Молодежная, д3',
	'00100': 'улица Молодежная, д4',
	
	'00101': 'улица Вторая Крестьянская, д1',
	'00102': 'улица Вторая Крестьянская, д2',
	'00103': 'улица Вторая Крестьянская, д3',
	'00104': 'улица Вторая Крестьянская, д4',
	'00105': 'улица Вторая Крестьянская, д5',
	
	'00106': 'переулок Торговый, д1',
	'00107': 'переулок Торговый, д2',
	'00108': 'переулок Торговый, д3',
	'00109': 'переулок Торговый, д4',
	
	'00110': 'улица Набережная, д1',
	'00111': 'улица Набережная, д2',
	'00112': 'улица Набережная, д3',
	'00113': 'улица Набережная, д4',
	'00114': 'улица Набережная, д5',
	'00115': 'улица Набережная, д6',
	'00116': 'улица Набережная, д7',
	'00117': 'улица Набережная, д8',
	'00118': 'улица Набережная, д9',
	
	'00119': 'улица Неизвестная, д1',
	
	'00120': 'улица Полевая, д1',
	'00121': 'улица Полевая, д2',
	'00122': 'улица Полевая, д3',
	'00123': 'улица Полевая, д4',
	'00124': 'улица Полевая, д5',
	
	'00125': 'переулок Подгорный, д1',
	'00126': 'переулок Подгорный, д2',
	'00127': 'переулок Подгорный, д3',
	'00128': 'переулок Подгорный, д4',
	'00129': 'переулок Подгорный, д5',
	
	'00130': 'улица Садовая, д1',
	'00131': 'улица Садовая, д2',
	'00132': 'улица Садовая, д3',
	'00133': 'улица Садовая, д4',
	'00134': 'улица Садовая, д5',
	'00135': 'улица Садовая, д6',
}

var inv: Dictionary = {
	'slot_1': {'id': 'void'},
	'slot_2': {'id': 'void'},
	'slot_3': {'id': 'void'},
	'slot_4': {'id': 'void'}
}

# ЭТОТ ПРЕДМЕТ ГЕНЕРИРУЕТСЯ В ФУНКЦИИ add_random_task
var item_package: Dictionary = {}

# ЗАКРЫТА ЛИ В РАМКАХ ТЕСТА КВОТА?
var quota_passed: bool = false
# СКОЛЬКО УЖЕ ДОСТАВЛЕНО
var quota_delivered: int = 0
# СКОЛЬКО ИГРОК ДОЛЖЕН ДОСТАВИТЬ В РАМКАХ ТЕСТА
var quota_target_to_deliver: int = 4

func add_item_to_inv(item_data: Dictionary) -> bool:
	var hasFreeSlot: bool = false
	var target_slot: int = -1
	if inv['slot_4']['id'] == 'void':
		hasFreeSlot = true
		target_slot = 4
	if inv['slot_3']['id'] == 'void':
		hasFreeSlot = true
		target_slot = 3
	if inv['slot_2']['id'] == 'void':
		hasFreeSlot = true
		target_slot = 2
	if inv['slot_1']['id'] == 'void':
		hasFreeSlot = true
		target_slot = 1
	if hasFreeSlot:
		inv['slot_' + str(target_slot)] = item_data
		return true
	return false

func add_random_task() -> void:
	var package_weight: int = 0
	var package_fill_type: int = randi_range(0,10)
	var package_fill: String = 'void'
	if package_fill_type >= 0 and package_fill_type < 6:
		package_fill = 'based'
	elif package_fill_type >= 6 and package_fill_type < 9:
		package_fill = 'food' # ECO
	elif package_fill_type == 9:
		package_fill = 'docs' # AVOID WATER
	elif package_fill_type == 10:
		package_fill = 'glass' # FRAGILE

	var package_type: int = randi_range(0,1)
	var package_type_id: String = 'void'
	match package_type:
		0:
			package_type_id = 'box'
			package_weight = randi_range(2, 20)
		1:
			package_type_id = 'letter'
			package_weight = randi_range(1, 3)
	var address_lib = ClassAddresses.new()
	var deliver_id = address_lib.get_random_delivery_id()
	var target_address = address_lib.addresses[str(deliver_id)]
	var task_data: Dictionary = {
		'id': package_type_id,
		'name': 'Доставка на адрес ' + target_address,
		'deliver_id': deliver_id,
		'target_address': target_address,
		'fill_type': package_fill,
		'weight': package_weight
	}
	item_package = task_data

func deliver_package(item: Dictionary) -> bool:
	if item.has('deliver_id'):
		if addresses.has(item['deliver_id']):
			quota_delivered += 1
			return true
	return false



func before_all():
	# ИГРОК ПОДБИРАЕТ ЧЕТЫРЕ СОВЕРШЕННО СЛУЧАЙНЫЕ ПОСЫЛКИ
	add_random_task()
	add_item_to_inv(item_package)
	add_random_task()
	add_item_to_inv(item_package)
	add_random_task()
	add_item_to_inv(item_package)
	add_random_task()
	add_item_to_inv(item_package)
	# ИГРОК ДОСТАВЛЯЕТ 4 ПОСЫЛКИ ТОЧНО ПО АДРЕСАМ
	deliver_package(inv['slot_1'])
	deliver_package(inv['slot_2'])
	deliver_package(inv['slot_3'])
	deliver_package(inv['slot_4'])
	
func test_assert_eq_number_not_equal():
	assert_eq(quota_delivered, quota_target_to_deliver, "Delivered: " + str(quota_delivered) + '/' + str(quota_target_to_deliver))
